using System.Diagnostics;
using NUnit.Framework;

namespace NumberFunctions.Tests
{
    [TestFixture]
    public class ExtensionsTests
    {
        [TestCase(-255.255, ExpectedResult = "1100000001101111111010000010100011110101110000101000111101011100")]
        [TestCase(-0.0255, ExpectedResult = "1011111110011010000111001010110000001000001100010010011011101001")]
        [TestCase(-0.25, ExpectedResult = "1011111111010000000000000000000000000000000000000000000000000000")]
        [TestCase(255.255, ExpectedResult = "0100000001101111111010000010100011110101110000101000111101011100")]
        [TestCase(4294967295.0, ExpectedResult = "0100000111101111111111111111111111111111111000000000000000000000")]
        [TestCase(double.MinValue, ExpectedResult = "1111111111101111111111111111111111111111111111111111111111111111")]
        [TestCase(double.MaxValue, ExpectedResult = "0111111111101111111111111111111111111111111111111111111111111111")]
        [TestCase(double.Epsilon, ExpectedResult = "0000000000000000000000000000000000000000000000000000000000000001")]
        [TestCase(double.NaN, ExpectedResult = "1111111111111000000000000000000000000000000000000000000000000000")]
        [TestCase(double.NegativeInfinity, ExpectedResult = "1111111111110000000000000000000000000000000000000000000000000000")]
        [TestCase(double.PositiveInfinity, ExpectedResult = "0111111111110000000000000000000000000000000000000000000000000000")]     
        [TestCase(-0.0, ExpectedResult = "1000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase(0.0, ExpectedResult = "0000000000000000000000000000000000000000000000000000000000000000")]
        public string GetBinaryStringMethod_GetBinaryStringOfDobule(double number)
        {
            Debug.WriteLine(double.MinValue);
            Debug.WriteLine(double.MaxValue);
            return number.GetBinaryString();
        }
    }
}
